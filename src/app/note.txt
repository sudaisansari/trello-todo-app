{data.length > 0 ? data.map((item, index) => (
                <div key={index} className='bg-[#101204] w-[272px] p-[8px] rounded-2xl'>
                    {/* Heading and icons */}
                    <div className='flex flex-row justify-between items-center mt-[4px] mx-[8px]'>
                        <h2 className='text-[14px] font-[700] text-[#A1ACB5]'>{item.title}</h2>
                        <div className='flex flex-row gap-x-[16px]'>
                            <CgArrowsScrollH className='text-white text-[20px]' />
                            <BsThreeDots className='text-white text-[20px]' />
                        </div>
                    </div>
                    {/* Mapped Input Fields */}
                    <div className='mt-[20px] flex flex-col gap-y-[7px]'>
                        {item.inputs.map((item, index) => (
                            <Draggable key={index} draggableId={`draggable-column-${index}`} index={index}>
                                {(provided) => (
                                    <div
                                        {...provided.dragHandleProps}
                                        {...provided.draggableProps}
                                        ref={provided.innerRef}
                                        className='relative w-[254px]'>
                                        {editingIndex === item.id ? (
                                            <input
                                                type='text'
                                                value={item.value}
                                                onChange={(e) => handleInputChange(e, item.id)}
                                                className='pl-[13px] pr-[40px] pb-[13px] pt-[17px] w-full rounded-xl bg-[#22272B] text-[#A1ACB5] hover:ring-2 ring-white cursor-text'
                                                onKeyDown={(e) => handleKeyDownWhenEdit(e)}
                                            />
                                        ) : (
                                            <div className='hover:ring-2 ring-white pl-[13px] pr-[17px] pb-[13px] pt-[17px] w-[254px] rounded-xl bg-[#22272B] text-[#A1ACB5]'>
                                                {item.value}
                                            </div>
                                        )}
                                        {/* Pencil Icon */}
                                        <div className='absolute top-1/2 right-[10px] transform -translate-y-1/2'>
                                            <FiEdit2
                                                className='text-[#A1ACB5] hover:text-white cursor-pointer'
                                                onClick={() => handleEditClick(item.id)} // Enable input editing on click
                                            />
                                        </div>
                                    </div>
                                )}
                            </Draggable>
                        ))}

                        {/* {provided.placeholder} */}

                        {/* Conditionally Show New Input Field */}
                        {isAddingNewCard && (
                            <div className='relative w-[254px] mt-4'>
                                <input
                                    type='text'
                                    value={newInput}
                                    onChange={(e) => setNewInput(e.target.value)}
                                    onKeyDown={(e) => handleKeyDown(e, item.id)} // Handle pressing "Enter" key
                                    placeholder=''
                                    className='pl-[13px] pr-[40px] pb-[13px] pt-[17px] w-full rounded-xl bg-[#22272B] text-[#A1ACB5] hover:ring-2 ring-white cursor-text'
                                />
                                {/* Pencil Icon */}
                                <div className='absolute top-1/2 right-[10px] transform -translate-y-1/2'>
                                    <FiEdit2
                                        className='text-[#A1ACB5] hover:text-white cursor-pointer'
                                        onClick={handleAddNewInput} // Add new input to data array
                                    />
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Bottom */}
                    < div className='flex flex-row justify-between items-baseline' >
                        {/* Add Card Button */}
                        < div
                            className='flex flex-row items-center gap-x-[11px] mt-[20px] mb-[15px] hover:bg-gray-800 rounded-md p-2 text-[#7B868E] cursor-pointer'
                            onClick={() => setIsAddingNewCard(true)} // Show new input field when clicked
                        >
                            <FaPlus />
                            <span className='text-[14px] font-[400]'>Add a card</span>
                        </div>
                        {/* Template Icon */}
                        <div className='mr-[15px]'>
                            <FaIdCard className='text-white' />
                        </div>
                    </div>
                    {/* <Bottom setIsAddingNewCard={setIsAddingNewCard(true)} /> */}
                </div>
            )) : (
                <p className="text-center text-white">No cards available</p>
            )}